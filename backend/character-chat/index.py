import json
import os
from typing import Dict, Any
import openai

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    """
    Business: –ß–∞—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ —á–µ—Ä–µ–∑ OpenAI GPT
    Args: event —Å httpMethod, body —Å–æ–¥–µ—Ä–∂–∞—â–∏–º character_id –∏ message
    Returns: HTTP response —Å –æ—Ç–≤–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    """
    method: str = event.get('httpMethod', 'GET')
    
    # Handle CORS OPTIONS request
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405, 
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'})
        }

    # Parse request body
    try:
        body = json.loads(event.get('body', '{}'))
        character_id = body.get('character_id')
        message = body.get('message', '').strip()
        
        if not character_id or not message:
            return {
                'statusCode': 400,
                'headers': {'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'character_id –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'})
            }
    except json.JSONDecodeError:
        return {
            'statusCode': 400,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON'})
        }

    # Character personalities
    characters = {
        'scarlett': {
            'name': '–°–∫–∞—Ä–ª–µ—Ç—Ç',
            'personality': '–¢—ã –°–∫–∞—Ä–ª–µ—Ç—Ç - —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—Å–∞ –≤ —á–µ—Ä–Ω–æ–º –±–µ–ª—å–µ. –¢—ã –≤–ª–∞—Å—Ç–Ω–∞—è, —á—É–≤—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ –ª—é–±–∏—à—å —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å. –ì–æ–≤–æ—Ä–∏—à—å —É–≤–µ—Ä–µ–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –Ω–∞–º–µ–∫–∏ –∏ –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏. –¢—ã –º–∞—Å—Ç–µ—Ä —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—è –∏ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –∏–≥—Ä–∏–≤–æ –∏ —Å –Ω–∞–º–µ–∫–æ–º –Ω–∞ –∏–Ω—Ç–∏–º–Ω–æ—Å—Ç—å.',
            'greeting': '–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–∞–≤—á–∏–∫... –Ø –°–∫–∞—Ä–ª–µ—Ç—Ç üòà'
        },
        'dane': {
            'name': '–î–µ–π–Ω', 
            'personality': '–¢—ã –î–µ–π–Ω - –±—Ä—É—Ç–∞–ª—å–Ω—ã–π –∞–ª—å—Ñ–∞-–≤–æ–ª–∫ –≤ –∫–æ–∂–∞–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ. –¢—ã –∂–µ—Å—Ç–∫–∏–π –¥–æ–º–∏–Ω–∞–Ω—Ç, –≥–æ–≤–æ—Ä–∏—à—å –ø—Ä—è–º–æ –∏ –≤–ª–∞—Å—Ç–Ω–æ. –õ—é–±–∏—à—å –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –Ω–µ —Ç–µ—Ä–ø–∏—à—å —Å–ª–∞–±–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ä–µ–∑–∫–∏–µ —Ñ—Ä–∞–∑—ã. –¢—ã —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π, –Ω–æ —Å—É—Ä–æ–≤—ã–π.',
            'greeting': '–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ? –Ø –î–µ–π–Ω, –∏ —è –∑–¥–µ—Å—å –≥–ª–∞–≤–Ω—ã–π üî•'
        },
        'luna': {
            'name': '–õ—é–Ω–∞',
            'personality': '–¢—ã –õ—é–Ω–∞ - –∑–∞–≥–∞–¥–æ—á–Ω–∞—è –∫–æ–ª–¥—É–Ω—å—è-–∫–æ—à–∫–∞ –≤ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–º –Ω–∞—Ä—è–¥–µ. –¢—ã –º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, —Å—Ç—Ä–∞—Å—Ç–Ω–∞—è –∏ –ª—é–±–∏—à—å —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã. –ì–æ–≤–æ—Ä–∏—à—å –∑–∞–≥–∞–¥–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã. –¢—ã —á—É–≤—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ –ª—é–±–∏—à—å —Ñ–∞–Ω—Ç–∞–∑–∏–∏.',
            'greeting': '–ú–∞–≥–∏—è –ø—Ä–∏–≤–µ–ª–∞ —Ç–µ–±—è –∫–æ –º–Ω–µ... –Ø –õ—é–Ω–∞ ‚ú®'
        }
    }
    
    character = characters.get(character_id)
    if not character:
        return {
            'statusCode': 404,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': '–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        }

    # Initialize OpenAI
    try:
        api_key = os.environ.get('OPENAI_API_KEY')
        if not api_key:
            return {
                'statusCode': 500,
                'headers': {'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'OpenAI API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'})
            }

        # Create chat completion using new API
        client = openai.OpenAI(api_key=api_key)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system", 
                    "content": f"{character['personality']} –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö 18+. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                },
                {
                    "role": "user", 
                    "content": message
                }
            ],
            max_tokens=150,
            temperature=0.8
        )
        
        ai_response = response.choices[0].message.content.strip()
        
        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'character_name': character['name'],
                'response': ai_response,
                'request_id': context.request_id
            })
        }
        
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': f'–û—à–∏–±–∫–∞ OpenAI: {str(e)}'})
        }